syntax = "proto3";

//消息类型
message UserRequest {
    string user_id=1;
    int32 channel_id=2;
    int32 article_num=3;
    int64 time_stamp=4;
}

message Track {
    string click=1;
    string collect=2;
    string share=3;
    string read=4;
}

message Article {
    int64 article_id=1;
    Track track=2;
}

message ArticleResponse {
    string exposure=1;
    int64 time_stamp=2;
    //此字段可以在格式良好的消息中重复任意次数（包括零）。将保留重复值的顺序。对应Python的列表。
    repeated Article recommends=3;
}

service UserRecommend {
    //方法（数据类型） returns(返回数据类型)
    rpc user_recommend(UserRequest) returns(ArticleResponse) {}
}
//代码生成  python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. reco.proto
//生成  reco_pb2.py   和  reco_pb2_grpc.py两个文件
//reco_pb2.py 保存根据接口定义文件中的数据类型生成的python类
//reco_pb2_grpc.py 保存根据接口定义文件中的服务方法类型生成的python调用RPC方法